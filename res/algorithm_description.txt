g++ bco_srg.cpp bco_srg.hpp jacobi_eigenvalue.cpp jacobi_eigenvalue.hpp normal.cpp rand_el_unordered_set.cpp spectral_distance.cpp write_to_file.cpp
./a.out

The first graph representation is the one using classic C arrays. The graphs are representated with variable As (array of arrays).
For each bee we have binary array of n*n size. (n corresponding to graph nodes)
If i-th and j-th nodes of a graph are connected, then (i*n + j)-th position (and therefore its symmetric position) in array is equal to 1, else 0.
We chose one dimensional array for storing matrix because version of Jacobi algorithm for calculating eigenvalues ,which we found on the internet, demands it.
Our algorithm heavily relies on powerful data structures vector and unordered_set from c++, which are included in 
<vector> and <unordered_set> cpp headers. Unordered sets take (approximately) constant time to insert, delete and find, 
which is very useful in our case and we are using vectors to construct dinamically allocated arrays and matrices (vector of vectors) of unordered sets.
#define sets unordered_sets
In variable neigh_sets(vector of vectors of sets) we store (for each bee), on i-th position, vector containing neighbours (unordered) of i-th node in corresponding graph.
We also use variable non_neigh_sets in the same way. That's the second way for graph representation in program.
Variable non_iso stores (for each bee) nodes that have at least one neighbour. We use this vector to choose the first vertex of edge to be erased.
In simmilar way we store (for each bee) nodes that have less than n-1 neighbours in a variable called not_compl_nodes.

BCOi implementation:
In construction phase we choose arbitrary solutions by adding edges to an empty graph containing only nodes.
Maintaining data collections is important after each transformation of any graph. 
In this phase we only use insert and delete method on sets and classic variable assigning of primitive type.
All of this operations take constant time.
When initial solution is constructed we call Jacobi algorithm to check if we already found our solution.

In backward pass we use assigning set to another set using overrided '=' operator from C++. 
This operation copies the entire content from a set and paste it to another. 
It's linearly dependent on size of a set. 
Forward pass is the main piece of our code. That's the place where we do the most of transformations.
Firstly we choose a random value for variable 'o' which will contain a number of transformations per iteration.
Its range is (1, 2*m), add explanation for 2*m. Then we tranfsorm a solution 'o' times by substituting one edge currently in graph with another not existing.
Substituting is done in two parts: adding edge and deleting edge.
When selecting edge to be erased, we randomly choose element from 'non_iso' set and then one random neighbour of that element from 'neigh_sets'.
When selecting edge to be added, we randomly choose element from 'not_compl_nodes' and then one random non_neighbour of that element from 'non_neigh_sets'.
Random selection from a set usually takes linear time but we found smart trick to avoid it, on the internet.
Random selection in constant time algorithm:
1. check the unordered set in not empty (not ever going to happen in our situation)
2. generate a random value_type element
3. if already in the unordered set return it else insert it
4. get an iterator it on this element
5. get the random element as *(it++) (and if *it is the last element the get the first element)
6. delete the element you inserted and return the value in (5)
When 'o' transformations are finished, we call Jacobi algorithm again to see if we found our solution.

Credits:

Jacobi algoritm: https://people.sc.fsu.edu/~jburkardt/c_src/jacobi_eigenvalue/jacobi_eigenvalue.html

getting random element from a set in constant time: Matovich https://stackoverflow.com/questions/12761315/random-element-from-unordered-set-in-o1/31522686#31522686
